City,Temperature,Humidity,Wind Speed
New York,29,65,12
New York,31,70,15
New York,,72,14
Los Angeles,35,40,10
Los Angeles,33,42,12
Los Angeles,36,,9
Chicago,25,75,20
Chicago,27,73,18
Chicago,26,74,19
Houston,34,68,16
Houston,33,70,
Houston,35,69,15
Miami,32,80,14
Miami,31,82,13
Miami,81,12

city_weather_project/
├── city_weather/                 # Package folder
│   ├── __init__.py
│   ├── cli.py
│   ├── data_handler.py
│   ├── weather.py
│
├── data/                         # Sample data folder
│   └── city_weather.csv
│
├── requirements.txt              # Dependencies for developers
├── setup.py                      # Packaging & distribution
└── README.md                     # Project documentation

requirements.txt
pandas
numpy
matplotlib
seaborn

pip install -r requirements.txt

 Step 1: Install Required Libraries
Ensure you have the necessary Python libraries installed:
pip install pandas numpy matplotlib seaborn

 Step 2: Create the Data Handler Module
city_weather/data_handler.py:
import pandas as pd

def load_csv(file_path):
    """Load CSV into pandas DataFrame"""
    return pd.read_csv(file_path)

def clean_data(df):
    """Handle missing values and remove duplicates"""
    df = df.drop_duplicates()
    df = df.fillna(df.mean())
    return df

 Step 3: Create the Weather Processing Module
city_weather/weather.py:
import pandas as pd

def group_by_city(df):
    """Group data by city and compute aggregate statistics"""
    return df.groupby('City').agg({
        'Temperature': ['mean', 'max', 'min'],
        'Humidity': ['mean', 'max', 'min'],
        'Wind Speed': ['mean', 'max', 'min']
    }).reset_index()

 Step 4: Create the Command-Line Interface (CLI)
city_weather/cli.py:
import argparse
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from .data_handler import load_csv, clean_data
from .weather import group_by_city

def main():
    parser = argparse.ArgumentParser(description="Process city weather data")
    parser.add_argument('--file', type=str, required=True, help="Path to the CSV file")
    parser.add_argument('--output', type=str, help="Path to save the processed CSV")
    args = parser.parse_args()

    # Load and clean data
    df = load_csv(args.file)
    df = clean_data(df)

    # Group by city and compute statistics
    city_stats = group_by_city(df)

    # Save the processed data if an output path is provided
    if args.output:
        city_stats.to_csv(args.output, index=False)

    # Visualize the data
    plt.figure(figsize=(10, 6))
    sns.barplot(x='City', y=('Temperature', 'mean'), data=city_stats)
    plt.xticks(rotation=90)
    plt.title('Average Temperature by City')
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()

 Step 5: Create the setup.py File
setup.py:
from setuptools import setup, find_packages

setup(
    name="city_weather",
    version="0.1.0",
    packages=find_packages(),
    install_requires=[
        "pandas",
        "numpy",
        "matplotlib",
        "seaborn"
    ],
    entry_points={
        "console_scripts": [
            "city_weather=city_weather.cli:main"
        ]
    }
)

Step 6: Build the Package
From the project root directory, run:
python setup.py sdist bdist_wheel
This will generate distribution archives in the dist/ directory.

 Step 7: Install the Package Locally
Install the package using pip:
pip install dist/city_weather-0.1.0-py3-none-any.whl

 Step 8: Run the CLI Tool
Now, you can run the CLI tool from the command line:
city_weather --file data/city_weather.csv --output data/processed_weather.csv
This command will:
•	Load the weather data from data/city_weather.csv.
•	Clean the data by handling missing values and duplicates.
•	Group the data by city and compute aggregate statistics.
•	Save the processed data to data/processed_weather.csv.
•	Display a bar plot of the average temperature by city.

The CLI tool will generate a bar plot showing the average temperature by city. Here's an example of what the plot might look like:

You've now created a real-time Python project that:
•	Loads and cleans a large dataset from a CSV file.
•	Groups the data by city and computes aggregate statistics.
•	Visualizes the data using a bar plot.
•	Packages the project into a .whl file for distribution.
•	Provides a command-line interface for easy usage.
This project demonstrates how to handle large datasets, perform data aggregation, and visualize the results, all while maintaining a clean and modular codebase.
